[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "db-connect-mcp"
version = "0.1.3"
description = "Multi-database MCP server for PostgreSQL, MySQL, and ClickHouse"
readme = "README.md"
requires-python = ">=3.10"
license = { text = "MIT" }
authors = [{ name = "Yuri Gui", email = "yugui923@users.noreply.github.com" }]
keywords = [
    "mcp",
    "database",
    "postgresql",
    "mysql",
    "clickhouse",
    "claude",
    "analysis",
    "data-exploration",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Database",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Framework :: AsyncIO",
]

dependencies = [
    "mcp>=1.0.0",
    "sqlalchemy[asyncio]>=2.0.0",
    "pydantic>=2.0.0",
    "python-dotenv>=1.0.0",
    "asyncpg>=0.29.0",
    "aiomysql>=0.2.0",
    "clickhouse-connect>=0.7.0",
]

[project.urls]
Homepage = "https://github.com/yugui923/db-connect-mcp"
Repository = "https://github.com/yugui923/db-connect-mcp"
Issues = "https://github.com/yugui923/db-connect-mcp/issues"

[project.scripts]
db-connect-mcp = "db_connect_mcp.server:main"

[dependency-groups]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-timeout>=2.1.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "pyright>=1.1.0",
    "hatchling>=1.0.0",
]

[tool.hatch.build.targets.sdist]
only-include = ["src/db_connect_mcp"]

[tool.hatch.build.targets.wheel]
packages = ["src/db_connect_mcp"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src/db_connect_mcp"]
omit = ["tests/*", "**/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
